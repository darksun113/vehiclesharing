######################################################
# ON ALL HOSTS

mkdir -p ~/fabric && cd ~/fabric
curl -sSL https://bit.ly/2ysbOFE | bash -s 1.4.0 -s

# Add ~/fabric/bin into PATH of ~/.bashrc
# Source it.

# The script will download binaries and some yaml files, as well.
# curl -f -s -C - https://nexus.hyperledger.org/content/repositories/releases/org/hyperledger/fabric/hyperledger-fabric/linux-amd64-1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz -o fabricbin.tar.gz




######################################################
# Boot of the Blockchain network

1, Clear

2, Generate msp
    on orderer
    on vehicle
    on sharing

3, Copy vehicle and sharing org MSP to the orderer msp, together.

4. Copy configtx.yaml and then edit it. On orderer
        ~/fabric# ll
        total 36
        drwxr-xr-x  5 root root  4096 Jan 26 20:08 ./
        drwx------ 22 root root  4096 Jan 26 20:07 ../
        drwxrwxr-x  2 1001 1001  4096 Jan 10 02:04 bin/
        drwxrwxr-x  2 1001 1001  4096 Jan 10 02:54 config/
        -rw-r--r--  1 root root 13017 Jan 26 17:57 configtx.yaml
        drwxr-xr-x  4 root root  4096 Jan 26 20:08 vehiclesharing/
                                                        channel-artifacts/
                                                        mymsp/
                                                        configtx.yaml
                                                        docker-compose-prod-orderer.yaml

                                                        
** Dont' use config.yaml in msp folder, otherwise, you have to specify some OUs in configtx.yaml.
See https://stackoverflow.com/questions/52982952/implementation-of-organization-unit-identifier-in-peer-organisation-causes-order


5. Generate genesis block on orderer

    cd ~/fabric/vehiclesharing

    # Generate

    export FABRIC_CFG_PATH=${PWD}
    export CLI_TIMEOUT=10
    export CLI_DELAY=3
    export CHANNEL_NAME="vschannel"
    export LANGUAGE=golang
    export VERBOSE=true

    mkdir -p channel-artifacts
    rm -rf channel-artifacts/*

    # Generate cert files and genesis block

    #### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -channelID bctestgenesis
    #### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -channelID bctestgenesis
    #### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! -channelID bctestgenesis
    
    configtxgen -profile VehicleSharingOrdererGenesis -outputBlock ./channel-artifacts/vehiclesharing_genesis.block -channelID bctestgenesis
    
    #### (In this case now)
    
    configtxgen -profile VehicleSharingChannel -outputCreateChannelTx ./channel-artifacts/vehiclesharing_channel.tx -channelID ${CHANNEL_NAME}
    
    configtxgen -profile VehicleSharingChannel -outputAnchorPeersUpdate ./channel-artifacts/vehicle_org_anchors.tx -channelID ${CHANNEL_NAME} -asOrg VehicleOrg
    configtxgen -profile VehicleSharingChannel -outputAnchorPeersUpdate ./channel-artifacts/sharing_org_anchors.tx -channelID ${CHANNEL_NAME} -asOrg SharingOrg
    
    # Then copy the channel-artifacts and msp folder to other hosts.

6, Start orderer and peers
    
    docker-compose -f docker-compose-prod-orderer.yaml up -d 2>&1
    
    # And then start others
    
    docker-compose -f docker-compose-prod-peer0-vehicle.yaml up -d 2>&1
    
    docker-compose -f docker-compose-prod-peer0-sharing.yaml up -d 2>&1
    
    
7, hosts file on all hosts

# orderer
192.168.1.3 orderer.bctest.example.com
# peera
192.168.1.4 peer0.vehicle.example.com
# peerb
192.168.1.5 peer0.sharing.example.com


8, Distribute the channel-artifacts to client. (channel.tx and VehicleOrgAnchors.tx)
    And copy the orgmsp/orderer to peer0
    And copy local msp from other nodes
    
    
    
    
    docker-compose -f docker-compose-prod-client.yaml up -d 2>&1
    

    # for peer0.vehicle
    
    
    export CRYPTO_PATH="/etc/hyperledger/fabric"

    export CHANNEL_NAME="vschannel"
    export LANGUAGE="golang"
    export ORDERER_ADDRESS="orderer.bctest.example.com:7050"
    export DEFAULT_POLICY="AND ('VehicleMSP.peer','SharingMSP.peer')"
    export CORE_PEER_LOCALMSPID="VehicleMSP"
    export CORE_PEER_ADDRESS="peer0.vehicle.example.com:7051"

    export ORDERER_CA="${CRYPTO_PATH}/orgmsp/orderer.bctest.example.com/msp/tlscacerts/tlsca.bctest.example.com.pem"
    
    export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/localmsp/peer0.vehicle.example.com/tls/tlsca.vehicle.example.com.pem"
    export CORE_PEER_TLS_CERT_FILE="${CRYPTO_PATH}/localmsp/peer0.vehicle.example.com/tls/tls-peer0.vehicle.example.com.pem"
    export CORE_PEER_TLS_KEY_FILE="${CRYPTO_PATH}/localmsp/peer0.vehicle.example.com/tls/tls-peer0.vehicle.example.com.key"
    export CORE_PEER_MSPCONFIGPATH="${CRYPTO_PATH}/localmsp/admin@vehicle.example.com/msp"
    
            echo $CHANNEL_NAME
            echo $LANGUAGE
            ls $ORDERER_CA
            echo $ORDERER_ADDRESS
            echo $DEFAULT_POLICY            
            echo $CORE_PEER_LOCALMSPID
            echo $CORE_PEER_ADDRESS

            ls $CORE_PEER_TLS_ROOTCERT_FILE
            ls $CORE_PEER_TLS_CERT_FILE
            ls $CORE_PEER_TLS_KEY_FILE
            ls $CORE_PEER_MSPCONFIGPATH
            
    

    peer channel create -o $ORDERER_ADDRESS -c $CHANNEL_NAME -f ./channel-artifacts/vehiclesharing_channel.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA
    
    # Once get succeed, a file vehiclesharing.block will be created. What means <channel_name>.block
    peer channel join -b $CHANNEL_NAME.block

    peer channel update -o $ORDERER_ADDRESS -c $CHANNEL_NAME -f ./channel-artifacts/vehicle_org_anchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA
    
    
    export CC_SRC_PATH="github.com/chaincode/chaincode_example02/go/"
    export VERSION="1.0"
    
    peer chaincode install -n mycc -v ${VERSION} -l ${LANGUAGE} -p ${CC_SRC_PATH}
    
    # Install the chaincode on peer0.sharing as well

    peer chaincode instantiate -o $ORDERER_ADDRESS --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc -l ${LANGUAGE} -v ${VERSION} -c '{"Args":["init","a","100","b","200"]}' -P "$DEFAULT_POLICY"
    
    peer chaincode query -C $CHANNEL_NAME -n mycc -c '{"Args":["query","a"]}'
    
    export PEER_CONN_PARMS="--peerAddresses peer0.vehicle.example.com:7051"
    export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.vehicle.example.com/msp/tlscacerts/tlsca.vehicle.example.com.pem""
    export PEER_CONN_PARMS="${PEER_CONN_PARMS} --peerAddresses peer0.sharing.example.com:7051"
    export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem""

    peer chaincode invoke -o $ORDERER_ADDRESS --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n mycc $PEER_CONN_PARMS -c '{"Args":["invoke","a","b","10"]}'
        
    # TODO: To start an individual container for each peer.
    
    
    
    # for peer0.sharing#############################################
    

    export CRYPTO_PATH="/etc/hyperledger/fabric"

    export CHANNEL_NAME="vschannel"
    export LANGUAGE="golang"
    export ORDERER_ADDRESS="orderer.bctest.example.com:7050"
    export DEFAULT_POLICY="AND ('SharingMSP.peer','SharingMSP.peer')"
    export CORE_PEER_LOCALMSPID="SharingMSP"
    export CORE_PEER_ADDRESS="peer0.sharing.example.com:7051"

    export ORDERER_CA="${CRYPTO_PATH}/orgmsp/orderer.bctest.example.com/msp/tlscacerts/tlsca.bctest.example.com.pem"
    
    export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/localmsp/peer0.sharing.example.com/tls/tlsca.sharing.example.com.pem"
    export CORE_PEER_TLS_CERT_FILE="${CRYPTO_PATH}/localmsp/peer0.sharing.example.com/tls/tls-peer0.sharing.example.com.pem"
    export CORE_PEER_TLS_KEY_FILE="${CRYPTO_PATH}/localmsp/peer0.sharing.example.com/tls/tls-peer0.sharing.example.com.key"
    export CORE_PEER_MSPCONFIGPATH="${CRYPTO_PATH}/localmsp/admin@sharing.example.com/msp"
    
    

    # Use the geneated .block file. Where should it from?
    peer channel join -b $CHANNEL_NAME.block

    peer channel update -o $ORDERER_ADDRESS -c $CHANNEL_NAME -f ./channel-artifacts/sharing_org_anchors.tx --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA
    
    
    export CC_SRC_PATH="github.com/chaincode/chaincode_example02/go/"
    export VERSION="1.0"
    
    peer chaincode install -n mycc -v ${VERSION} -l ${LANGUAGE} -p ${CC_SRC_PATH}

    
    
    

    
9, For peer0.sharing..............


