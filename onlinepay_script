###############################################################
# Add record in /etc/hosts
# peerc
# 192.168.1.2 peer0.onlinepay.example.com


###############################################################
cd ~/fabric/vehiclesharing

###############################################################
# generateCerts
# Generate MSP for onlinepay.example.com
./prodmsp_onlinepay.sh

# Copy the peer0.onlinepay.example.com orgmsp to client
# Copy the admin@onlinepay.example.com localmsp to client

# As additional, copy the admin@bctest.example.com localmsp to client

###############################################################
# generateChannelArtifacts
configtxgen -configPath ./configtx_onlinepay -printOrg OnlinePayOrg > ./channel-artifacts/onlinepayorg.json

# Copy the onlinepayorg.json to client/channel-artifacts

###############################################################
#### createConfigTx
#### docker exec cli scripts/step1org3.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT $VERBOSE
###############################################################
###############################################################

# Test by alice@sharing.example.com
docker exec -it client bash

# Make sure jq installed
# apt-get -y update && apt-get -y install jq

##############################################################
#### FOR TEST ONLY ###########################################
export CRYPTO_PATH="/etc/hyperledger/fabric"
export CORE_PEER_LOCALMSPID="SharingMSP"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/alice@sharing.example.com/msp
export CORE_PEER_ADDRESS="peer0.sharing.example.com:7051"
export CHANNEL_NAME="vschannel"
export CC_NAME="vehiclesharing"
peer chaincode query -C $CHANNEL_NAME -n $CC_NAME -c '{"Args":["findVehicle","C123"]}'



###############################################################
# createConfigTx
# setOrdererGlobals

export CRYPTO_PATH="/etc/hyperledger/fabric"
export CORE_PEER_LOCALMSPID="OrdererMSP"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/orderer.bctest.example.com/msp/tlscacerts/tlsca.bctest.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/admin@bctest.example.com/msp
export ORDERER_CA="${CRYPTO_PATH}/orgmsp/orderer.bctest.example.com/msp/tlscacerts/tlsca.bctest.example.com.pem"
export ORDERER_ADDRESS="orderer.bctest.example.com:7050"
export CHANNEL_NAME="vschannel"
export CC_NAME="vehiclesharing"

# fetchChannelConfig ${CHANNEL_NAME} config.json
peer channel fetch config config_block.pb -o $ORDERER_ADDRESS -c $CHANNEL_NAME --tls --cafile $ORDERER_CA

configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config > config.json

jq -s '.[0] * {"channel_group":{"groups":{"Application":{"groups": {"OnlinePayOrg":.[1]}}}}}' config.json ./channel-artifacts/onlinepayorg.json > modified_config.json


###############################################################
# createConfigUpdate ${CHANNEL_NAME} config.json modified_config.json org3_update_in_envelope.pb

configtxlator proto_encode --input config.json --type common.Config > original_config.pb
configtxlator proto_encode --input modified_config.json --type common.Config > modified_config.pb
configtxlator compute_update --channel_id $CHANNEL_NAME --original original_config.pb --updated modified_config.pb > config_update.pb
configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate > config_update.json
echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL_NAME'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . > config_update_in_envelope.json
configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope > onlinepayorg_update_in_envelope.pb


###############################################################
# signConfigtxAsPeerOrg 1 org3_update_in_envelope.pb
# Set peer env
export CORE_PEER_LOCALMSPID="SharingMSP"
export CORE_PEER_ADDRESS="peer0.sharing.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/admin@sharing.example.com/msp

peer channel signconfigtx -f onlinepayorg_update_in_envelope.pb
# This command will change onlinepayorg_update_in_envelope

#### FILES GENERATED ##########################################
#-rw-r--r-- 1 root root 33885 Feb 10 09:06 config.json
#-rw-r--r-- 1 root root 15105 Feb 10 09:04 config_block.pb
#-rw-r--r-- 1 root root 11013 Feb 10 09:45 config_update.json
#-rw-r--r-- 1 root root  4654 Feb 10 09:45 config_update.pb
#-rw-r--r-- 1 root root 15041 Feb 10 09:46 config_update_in_envelope.json
#-rw-r--r-- 1 root root 44788 Feb 10 09:12 modified_config.json
#-rw-r--r-- 1 root root 16555 Feb 10 09:45 modified_config.pb
#-rw-r--r-- 1 root root  8924 Feb 10 10:00 onlinepayorg_update_in_envelope.pb
#-rw-r--r-- 1 root root 12140 Feb 10 09:45 original_config.pb
###############################################################


###############################################################
#### Submitting transaction from a different peer (peer0.org2) which also signs it !!!
# Set peer env
export CORE_PEER_LOCALMSPID="VehicleMSP"
export CORE_PEER_ADDRESS="peer0.vehicle.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.vehicle.example.com/msp/tlscacerts/tlsca.vehicle.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/admin@vehicle.example.com/msp

peer channel update -f onlinepayorg_update_in_envelope.pb -c $CHANNEL_NAME -o $ORDERER_ADDRESS --tls --cafile $ORDERER_CA
# Need to execute this only once, the second execution will get failed with error likes: channel ''...
# Need to double-check this command in a clear environment.

###############################################################
#### START CONTAINER
###############################################################

cd ~/fabric/vehiclesharing/deployed/peer0.onlinepay 
docker-compose -f docker-compose-prod-peer0-onlinepay.yaml up -d 2>&1




###############################################################
#### docker exec Org3cli ./scripts/step2org3.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT $VERBOSE
###############################################################

export CORE_PEER_LOCALMSPID="OnlinePayMSP"
export CORE_PEER_ADDRESS="peer0.onlinepay.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.onlinepay.example.com/msp/tlscacerts/tlsca.onlinepay.example.com.pem"
export CORE_PEER_MSPCONFIGPATH="${CRYPTO_PATH}/localmsp/admin@onlinepay.example.com/msp"

peer channel fetch 0 "${CHANNEL_NAME}_onlinepay.block" -o "$ORDERER_ADDRESS" -c "$CHANNEL_NAME" --tls --cafile "$ORDERER_CA"
# To see, if can use 'peer channel fetch' in the first deployment for peer0.sharing...

peer channel join -b "${CHANNEL_NAME}_onlinepay.block"

# installChaincode 0 3 2.0
export CC_SRC_PATH="github.com/chaincode/vehiclesharing"
export VERSION="1.1"
export CC_NAME="vehiclesharing"
export LANGUAGE="golang"
peer chaincode install -n $CC_NAME -v $VERSION -l $LANGUAGE -p $CC_SRC_PATH

###############################################################
#### docker exec cli ./scripts/step3org3.sh $CHANNEL_NAME $CLI_DELAY $LANGUAGE $CLI_TIMEOUT $VERBOSE
#### Install and upgrade chaincode on other peers
###############################################################
# installChaincode 0 1 2.0
export CORE_PEER_LOCALMSPID="SharingMSP"
export CORE_PEER_ADDRESS="peer0.sharing.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/admin@sharing.example.com/msp
peer chaincode install -n $CC_NAME -v $VERSION -l $LANGUAGE -p $CC_SRC_PATH

# installChaincode 0 2 2.0
export CORE_PEER_LOCALMSPID="VehicleMSP"
export CORE_PEER_ADDRESS="peer0.vehicle.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.vehicle.example.com/msp/tlscacerts/tlsca.vehicle.example.com.pem"
export CORE_PEER_MSPCONFIGPATH=${CRYPTO_PATH}/localmsp/admin@vehicle.example.com/msp
peer chaincode install -n $CC_NAME -v $VERSION -l $LANGUAGE -p $CC_SRC_PATH

# upgradeChaincode 0 1
export DEFAULT_POLICY="AND ('VehicleMSP.peer','SharingMSP.peer','OnlinePayMSP.peer')"
peer chaincode upgrade -o "$ORDERER_ADDRESS" --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME \
-n "$CC_NAME" -v "$VERSION" -c '{"Args":[""]}' -P "$DEFAULT_POLICY" 

peer chaincode query -C $CHANNEL_NAME -n $CC_NAME -c '{"Args":["findVehicle","C123"]}'

# Use the new org
export CORE_PEER_LOCALMSPID="OnlinePayMSP"
export CORE_PEER_ADDRESS="peer0.onlinepay.example.com:7051"
export CORE_PEER_TLS_ROOTCERT_FILE="${CRYPTO_PATH}/orgmsp/peer0.onlinepay.example.com/msp/tlscacerts/tlsca.onlinepay.example.com.pem"
export CORE_PEER_MSPCONFIGPATH="${CRYPTO_PATH}/localmsp/admin@onlinepay.example.com/msp"
peer chaincode query -C $CHANNEL_NAME -n $CC_NAME -c '{"Args":["findVehicle","C123"]}'



# Failed Invoke
export PEER_CONN_PARMS="--peerAddresses peer0.vehicle.example.com:7051"
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.vehicle.example.com/msp/tlscacerts/tlsca.vehicle.example.com.pem""
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --peerAddresses peer0.sharing.example.com:7051"
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem""

peer chaincode invoke -o $ORDERER_ADDRESS --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n $CC_NAME $PEER_CONN_PARMS \
-c '{"Args":["createVehicle", "C12345", "FBC"]}'


# Fine Invoke
export PEER_CONN_PARMS="--peerAddresses peer0.vehicle.example.com:7051"
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.vehicle.example.com/msp/tlscacerts/tlsca.vehicle.example.com.pem""
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --peerAddresses peer0.sharing.example.com:7051"
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.sharing.example.com/msp/tlscacerts/tlsca.sharing.example.com.pem""
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --peerAddresses peer0.onlinepay.example.com:7051"
export PEER_CONN_PARMS="${PEER_CONN_PARMS} --tlsRootCertFiles "${CRYPTO_PATH}/orgmsp/peer0.onlinepay.example.com/msp/tlscacerts/tlsca.onlinepay.example.com.pem""

peer chaincode invoke -o $ORDERER_ADDRESS --tls $CORE_PEER_TLS_ENABLED --cafile $ORDERER_CA -C $CHANNEL_NAME -n $CC_NAME $PEER_CONN_PARMS \
-c '{"Args":["createVehicle", "C12345", "FBC"]}'

peer chaincode query -C $CHANNEL_NAME -n $CC_NAME -c '{"Args":["findVehicle","C12345"]}'

